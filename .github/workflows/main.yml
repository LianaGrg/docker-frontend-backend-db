name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      FRONTEND_IMAGE: frontend
      BACKEND_IMAGE: backend
      IMAGE_TAG: ${{ github.sha }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image URLs
        id: image-urls
        run: |
          echo "FRONTEND_ECR=${{ steps.login-ecr.outputs.registry }}/bdg/web_app_front" >> $GITHUB_ENV
          echo "BACKEND_ECR=${{ steps.login-ecr.outputs.registry }}/bdg/web_app_back" >> $GITHUB_ENV

      - name: Build and Tag frontend image
        run: |
          docker build -t $FRONTEND_IMAGE:$IMAGE_TAG ./frontend
          docker tag $FRONTEND_IMAGE:$IMAGE_TAG $FRONTEND_ECR:$IMAGE_TAG

      - name: Build and Tag backend image
        run: |
          docker build -t $BACKEND_IMAGE:$IMAGE_TAG ./backend
          docker tag $BACKEND_IMAGE:$IMAGE_TAG $BACKEND_ECR:$IMAGE_TAG

      - name: Scan frontend image with Trivy (ignore result)
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image \
            --severity CRITICAL,HIGH \
            $FRONTEND_IMAGE:$IMAGE_TAG || true

      - name: Scan backend image with Trivy (ignore result)
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image \
            --severity CRITICAL,HIGH \
            $BACKEND_IMAGE:$IMAGE_TAG || true

      - name: Push frontend image to ECR
        run: |
          docker push $FRONTEND_ECR:$IMAGE_TAG

      - name: Push backend image to ECR
        run: |
          docker push $BACKEND_ECR:$IMAGE_TAG

  terraform:
    needs: build-and-deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Init and Apply Terraform Backend
        working-directory: terraform/backend
        run: |
          terraform init
          terraform apply -auto-approve

      - name: Init and Apply Terraform Infrastructure
        working-directory: terraform/infrastructure
        run: |
          terraform init
          terraform apply -auto-approve
      
      - name: Get EC2 public IP
        id: tf-output
        working-directory: terraform/infrastructure
        run: |
          echo "EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV


  ansible:
    needs: terraform
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ansible_ec2_setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Ansible
        run: sudo apt update && sudo apt install -y ansible

      - name: Create SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PEM_FILE }}" > ~/.ssh/bdg_web_app.pem
          chmod 400 ~/.ssh/bdg_web_app.pem

      - name: Generate dynamic Ansible inventory
        run: |
          echo "[web]" > inventory.ini
          echo "ec2-instance ansible_host=$EC2_PUBLIC_IP ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/bdg_web_app.pem" >> inventory.ini

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i inventory.ini playbook.yml \
            --extra-vars "aws_account_id=${{ secrets.AWS_ACCOUNT_ID }} aws_region=${{ secrets.AWS_REGION }} image_tag=${{ github.sha }}"
